-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr ({
        [Right, {
          [s(":="), fun(l, op, r) {Assn(l, r)}]
        }],
        [Left, {
          [s("!!"), fun(l, op, r) {Binop(op, l, r)}]
        }],
        [Left, {
          [s("&&"), fun(l, op, r) {Binop(op, l, r)}]
        }],
        [Nona, {
          [s("=="), fun(l, op, r) {Binop(op, l, r)}],
          [s("!="), fun(l, op, r) {Binop(op, l, r)}],
          [s("<"), fun(l, op, r) {Binop(op, l, r)}],
          [s(">"), fun(l, op, r) {Binop(op, l, r)}],
          [s("<="), fun(l, op, r) {Binop(op, l, r)}],
          [s(">="), fun(l, op, r) {Binop(op, l, r)}]
        }],
        [Left, {
          [s("+"), fun(l, op, r) {Binop(op, l, r)}],
          [s("-"), fun(l, op, r) {Binop(op, l, r)}]
        }],
        [Left, {
          [s("*"), fun(l, op, r) {Binop(op, l, r)}],
          [s("/"), fun(l, op, r) {Binop(op, l, r)}],
          [s("%"), fun(l, op, r) {Binop(op, l, r)}]
        }]
    }, primary);

var elsePart = memo $ eta syntax (
  kElse s2=stmt {s2} |
  kElif e=exp kThen s=stmt {If(e, s, Skip)} |
  kElif e=exp kThen s=stmt el=elsePart {If(e, s, el)}
);

var code = memo $ eta syntax (
    kRead name = inbr[s("("), lident, s(")")] {Read(name)}
  | kWrite e = inbr[s("("), exp, s(")")] {Write(e)}
  | kSkip {Skip}
  | name=lident s[":="] e=exp {Assn(name, e)}
  | kIf e1=exp kThen s1=stmt el=elsePart kFi {If(e1, s1, el)}
  | kIf e1=exp kThen s1=stmt kFi {If(e1, s1, Skip)}
  | kWhile e=exp kDo st=stmt kOd { While(e, st) }
  | kDo st=stmt kWhile e=exp kOd { DoWhile(st, e) }
  | kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd { Seq(s1, While(e, Seq(s3, s2))) }
);

var stmt = memo $ eta syntax (
  code | head = code s[";"] tail = stmt {Seq(head, tail)}
);
   

-- Public top-level parser
public parse = stmt;
