-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
    case stmt of 
      Assn (x, expr) ->  [c[0] <- [x,evalExpr(c[0], expr)], c[1]]
    | Seq (st1, st2) -> eval(eval(c, st1), st2)
    | Skip -> c
    | Read (x) -> (case readWorld(c[1]) of [value, new_world] -> [c[0] <- [x, value], new_world] esac)
    | Write (expr) -> [c[0], writeWorld(evalExpr(c[0], expr), c[1])]
    | If(expr, s1, s2) ->
      if evalExpr(c.fst, expr) != 0 then
        eval(c, s1)
      else
        eval(c, s2)
      fi
    | While(expr, s) ->
      if evalExpr(c.fst, expr) != 0 then
        eval(eval(c, s), While(expr, s))
      else
        c
      fi
    | DoWhile(s, expr) -> 
      var c_new = eval(c, s);
      if evalExpr(c_new.fst, expr) != 0 then
        eval(c_new, DoWhile(s, expr))
      else
        c_new
      fi
    esac}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
